/*
 * This file is part of Visual Code Space.
 *
 * Visual Code Space is free software: you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * Visual Code Space is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Visual Code Space.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package com.teixeira.vcspace.core

import com.teixeira.vcspace.extensions.toFile

data class FileIcon(
    val name: String,
    val fileExtensions: List<String> = emptyList(),
    val fileNames: List<String> = emptyList(),
    val light: Boolean = false
)

data class FolderIcon(
    val name: String,
    val folderNames: List<String> = emptyList(),
    val light: Boolean = false
)

object FileIcons {
    private val defaultFileIcon = FileIcon("file")
    private val defaultFolderIcon = FolderIcon("folder")

    private val fileIcons = listOf(
        FileIcon("html", fileExtensions = listOf("html", "htm", "xhtml", "html_vm", "asp")),
        FileIcon(
            name = "json",
            fileExtensions = listOf(
                "json", "json5", "jsonc", "jsonl", "tsbuildinfo", "ndjson"
            ),
            fileNames = listOf(
                ".jscsrc",
                ".jshintrc",
                "composer.lock",
                ".jsbeautifyrc",
                ".esformatter",
                "cdp.pid",
                ".lintstagedrc",
                ".whitesource"
            )
        ),
        FileIcon("markdown", fileExtensions = listOf("md", "markdown", "rst")),
        FileIcon("blink", fileExtensions = listOf("blink"), light = true),
        FileIcon("css", fileExtensions = listOf("css")),
        FileIcon("sass", fileExtensions = listOf("sass", "scss")),
        FileIcon("less", fileExtensions = listOf("less")),
        FileIcon("hjson", fileExtensions = listOf("hjson")),
        FileIcon("just", fileNames = listOf("justfile", ".justfile")),
        FileIcon(
            name = "pug",
            fileExtensions = listOf("jade", "pug"),
            fileNames = listOf(".pug-lintrc", ".pug-lintrc.js", ".pug-lintrc.json")
        ),
        FileIcon(
            name = "jinja",
            fileExtensions = listOf("jinja", "jinja2", "j2", "jinja-html"),
            light = true
        ),
        FileIcon("proto", fileExtensions = listOf("proto")),
        FileIcon(
            name = "playwright",
            fileNames = listOf(
                "playwright.config.js",
                "playwright.config.mjs",
                "playwright.config.ts",
                "playwright.config.base.js",
                "playwright.config.base.mjs",
                "playwright.config.base.ts",
                "playwright-ct.config.js",
                "playwright-ct.config.mjs",
                "playwright-ct.config.ts"
            )
        ),
        FileIcon("sublime", fileExtensions = listOf("sublime-project", "sublime-workspace")),
        FileIcon("simulink", fileExtensions = listOf("slx")),
        FileIcon("twine", fileExtensions = listOf("tw", "twee")),
        FileIcon(
            name = "yaml",
            fileExtensions = listOf("yml.dist", "yaml.dist", "YAML-tmLanguage", "yml", "yaml")
        ),
        FileIcon(
            name = "xml",
            fileExtensions = listOf(
                "xml",
                "plist",
                "xsd",
                "dtd",
                "xsl",
                "xslt",
                "resx",
                "iml",
                "xquery",
                "tmLanguage",
                "manifest",
                "project",
                "xml.dist",
                "xml.dist.sample",
                "dmn",
                "jrxml",
                "xmp",
            ),
            fileNames = listOf(".htaccess")
        ),
        FileIcon("toml", fileExtensions = listOf("toml"), light = true),
        FileIcon(
            name = "image",
            fileExtensions = listOf(
                "png",
                "jpeg",
                "jpg",
                "gif",
                "ico",
                "tif",
                "tiff",
                "psd",
                "psb",
                "ami",
                "apx",
                "avif",
                "bmp",
                "bpg",
                "brk",
                "cur",
                "dds",
                "exr",
                "fpx",
                "gbr",
                "img",
                "jbig2",
                "jb2",
                "jng",
                "jxr",
                "pgf",
                "pic",
                "raw",
                "webp",
                "eps",
                "afphoto",
                "ase",
                "aseprite",
                "clip",
                "cpt",
                "heif",
                "heic",
                "kra",
                "mdp",
                "ora",
                "pdn",
                "reb",
                "sai",
                "tga",
                "xcf",
                "jfif",
                "ppm",
                "pbm",
                "pgm",
                "pnm",
                "icns",
                "3fr",
                "ari",
                "arw",
                "bay",
                "braw",
                "crw",
                "cr2",
                "cr3",
                "cap",
                "data",
                "dcs",
                "dcr",
                "dng",
                "drf",
                "eip",
                "erf",
                "fff",
                "gpr",
                "iiq",
                "k25",
                "kdc",
                "mdc",
                "mef",
                "mos",
                "mrw",
                "nef",
                "nrw",
                "obm",
                "orf",
                "pef",
                "ptx",
                "pxn",
                "r3d",
                "raf",
                "rwl",
                "rw2",
                "rwz",
                "sr2",
                "srf",
                "srw",
                "x3f",
            )
        ),
        FileIcon("palette", fileExtensions = listOf("pal", "gpl", "act")),
        FileIcon("javascript", fileExtensions = listOf("esx", "mjs", "js")),
        FileIcon("react", fileExtensions = listOf("jsx")),
        FileIcon("react_ts", fileExtensions = listOf("tsx")),
        FileIcon(
            name = "rocket",
            fileNames = listOf(
                ".release-it.json",
                ".release-it.ts",
                ".release-it.js",
                ".release-it.cjs",
                ".release-it.yaml",
                ".release-it.yml",
                ".release-it.toml",
                "release.toml",
                "release-plz.toml",
                ".release-plz.toml",
            )
        ),
        FileIcon(
            name = "routing",
            fileExtensions = listOf(
                "routing.ts",
                "routing.tsx",
                "routing.js",
                "routing.jsx",
                "routes.ts",
                "routes.tsx",
                "routes.js",
                "routes.jsx",
            ),
            fileNames = listOf(
                "router.js",
                "router.jsx",
                "router.ts",
                "router.tsx",
                "routes.js",
                "routes.jsx",
                "routes.ts",
                "routes.tsx",
            )
        ),
        FileIcon(
            name = "settings",
            fileExtensions = listOf(
                "ini",
                "dlc",
                "config",
                "conf",
                "properties",
                "prop",
                "settings",
                "option",
                "props",
                "prefs",
                "sln.dotsettings",
                "sln.dotsettings.user",
                "cfg",
                "cnf",
                "tool-versions",
            ),
            fileNames = listOf(
                ".jshintignore",
                ".buildignore",
                ".mrconfig",
                ".yardopts",
                "manifest.mf",
                ".clang-format",
                ".clang-format-ignore",
                ".clang-tidy",
                ".conf",
                "compile_flags.txt",
            )
        ),
        FileIcon("typescript-def", fileExtensions = listOf("d.ts", "d.cts", "d.mts")),
        FileIcon("pdf", fileExtensions = listOf("pdf")),
        FileIcon(
            name = "table",
            fileExtensions = listOf("xlsx", "xlsm", "xls", "csv", "tsv", "psv", "ods")
        ),
        FileIcon(
            name = "vscode",
            fileExtensions = listOf(
                "vscodeignore",
                "vsixmanifest",
                "vsix",
                "code-workplace",
                "code-workspace",
                "code-profile",
                "code-snippets",
            )
        ),
        FileIcon(
            name = "visualstudio",
            fileExtensions = listOf(
                "csproj",
                "ruleset",
                "sln",
                "slnx",
                "suo",
                "vb",
                "vbs",
                "vcxitems",
                "vcxitems.filters",
                "vcxproj",
                "vcxproj.filters",
            )
        ),
        FileIcon(
            name = "database",
            fileExtensions = listOf(
                "pdb",
                "sql",
                "pks",
                "pkb",
                "accdb",
                "mdb",
                "sqlite",
                "sqlite3",
                "pgsql",
                "postgres",
                "plpgsql",
                "psql",
                "db",
                "db3",
                "dblite",
                "dblite3",
                "debugsymbols",
                "odb",
            )
        ),
        FileIcon("csharp", fileExtensions = listOf("cs", "csx", "csharp")),
        FileIcon("qsharp", fileExtensions = listOf("qs")),
        FileIcon(
            name = "zip",
            fileExtensions = listOf(
                "zip",
                "z",
                "tar",
                "gz",
                "xz",
                "lz",
                "liz",
                "lzma",
                "lzma2",
                "lz4",
                "lz5",
                "lzh",
                "lha",
                "br",
                "bz2",
                "bzip2",
                "gzip",
                "brotli",
                "7z",
                "001",
                "rar",
                "far",
                "tz",
                "taz",
                "tlz",
                "txz",
                "tgz",
                "tpz",
                "tbz",
                "tbz2",
                "zst",
                "zstd",
                "tzst",
                "tzstd",
                "cab",
                "cpio",
                "rpm",
                "deb",
                "arj",
                "wim",
                "swm",
                "esd",
                "fat",
                "xar",
                "ntfs",
                "hfs",
                "squashfs",
                "apfs",
            )
        ),
        FileIcon("exe", fileExtensions = listOf("exe", "msi")),
        FileIcon("hex", fileExtensions = listOf("dat", "bin", "hex")),
        FileIcon("java", fileExtensions = listOf("java", "jsp")),
        FileIcon("jar", fileExtensions = listOf("jar")),
        FileIcon("javaclass", fileExtensions = listOf("class")),
        FileIcon("c3", fileExtensions = listOf("c3")),
        FileIcon("c", fileExtensions = listOf("c", "i", "mi")),
        FileIcon("h", fileExtensions = listOf("h")),
        FileIcon("cpp", fileExtensions = listOf("cc", "cpp", "cxx", "c++", "cp", "mii", "ii")),
        FileIcon("hpp", fileExtensions = listOf("hh", "hpp", "hxx", "h++", "hp", "tcc", "inl")),
        FileIcon("rc", fileExtensions = listOf("rc")),
        FileIcon("go", fileExtensions = listOf("go")),
        FileIcon("go-mod", fileExtensions = listOf("go.mod", "go.sum", "go.work", "go.work.sum")),
        FileIcon("python", fileExtensions = listOf("py")),
        FileIcon(
            name = "python-misc",
            fileExtensions = listOf("pyc", "whl"),
            fileNames = listOf(
                "requirements.txt",
                "pipfile",
                ".python-version",
                "manifest.in",
                "pylintrc",
                ".pylintrc",
                "pyproject.toml",
                "py.typed",
            )
        ),
        FileIcon("url", fileExtensions = listOf("url")),
        FileIcon(
            name = "console",
            fileExtensions = listOf(
                "sh",
                "ksh",
                "csh",
                "tcsh",
                "zsh",
                "bash",
                "bat",
                "cmd",
                "awk",
                "fish",
                "exp",
                "nu",
            ),
            fileNames = listOf(
                "commit-msg", "pre-commit", "pre-push", "post-merge"
            )
        ),
        FileIcon(
            name = "powershell",
            fileExtensions = listOf("ps1", "psm1", "psd1", "ps1xml", "psc1", "pssc")
        ),
        FileIcon(
            name = "gradle",
            fileExtensions = listOf("gradle"),
            fileNames = listOf("gradle.properties", "gradlew", "gradle-wrapper.properties")
        ),
        FileIcon("word", fileExtensions = listOf("doc", "docx", "rtf", "odt")),
        FileIcon(
            name = "certificate",
            fileExtensions = listOf("cer", "cert", "crt"),
            fileNames = listOf(
                "copying",
                "copying.md",
                "copying.rst",
                "copying.txt",
                "copyright",
                "copyright.md",
                "copyright.rst",
                "copyright.txt",
                "license",
                "license-agpl",
                "license-apache",
                "license-bsd",
                "license-mit",
                "license-gpl",
                "license-lgpl",
                "license.md",
                "license.rst",
                "license.txt",
                "licence",
                "licence-agpl",
                "licence-apache",
                "licence-bsd",
                "licence-mit",
                "licence-gpl",
                "licence-lgpl",
                "licence.md",
                "licence.rst",
                "licence.txt",
                "unlicense",
                "unlicense.txt",
            )
        ),
        FileIcon(
            name = "key",
            fileExtensions = listOf(
                "pub",
                "key",
                "pem",
                "asc",
                "gpg",
                "passwd",
                "shasum",
                "sha256",
                "sha256sum",
                "sha256sums",
            ),
            fileNames = listOf(".htpasswd", "sha256sums", ".secrets")
        ),
        FileIcon(
            name = "font",
            fileExtensions = listOf(
                "woff",
                "woff2",
                "ttf",
                "eot",
                "suit",
                "otf",
                "bmap",
                "fnt",
                "odttf",
                "ttc",
                "font",
                "fonts",
                "sui",
                "ntf",
                "mrf",
            )
        ),
        FileIcon("lib", fileExtensions = listOf("lib", "a", "bib")),
        FileIcon("dll", fileExtensions = listOf("dll", "ilk", "so")),
        FileIcon(
            name = "ruby",
            fileExtensions = listOf("rb", "erb", "rbs"),
            fileNames = listOf(".ruby-version")
        ),
        FileIcon("fsharp", fileExtensions = listOf("fs", "fsx", "fsi", "fsproj")),
        FileIcon("swift", fileExtensions = listOf("swift")),
        FileIcon("arduino", fileExtensions = listOf("ino")),
        FileIcon(
            name = "docker",
            fileExtensions = listOf(
                "dockerignore",
                "dockerfile",
                "docker-compose.yml",
                "docker-compose.yaml",
                "containerignore",
                "containerfile",
                "compose.yaml",
                "compose.yml",
            ),
            fileNames = listOf(
                "dockerfile",
                "dockerfile.prod",
                "dockerfile.production",
                "dockerfile.alpha",
                "dockerfile.beta",
                "dockerfile.stage",
                "dockerfile.staging",
                "dockerfile.dev",
                "dockerfile.development",
                "dockerfile.local",
                "dockerfile.test",
                "dockerfile.testing",
                "dockerfile.ci",
                "dockerfile.web",
                "dockerfile.windows",
                "dockerfile.worker",

                "docker-compose.yml",
                "docker-compose.override.yml",
                "docker-compose.prod.yml",
                "docker-compose.production.yml",
                "docker-compose.alpha.yml",
                "docker-compose.beta.yml",
                "docker-compose.stage.yml",
                "docker-compose.staging.yml",
                "docker-compose.dev.yml",
                "docker-compose.development.yml",
                "docker-compose.local.yml",
                "docker-compose.test.yml",
                "docker-compose.testing.yml",
                "docker-compose.ci.yml",
                "docker-compose.web.yml",
                "docker-compose.worker.yml",

                "docker-compose.yaml",
                "docker-compose.override.yaml",
                "docker-compose.prod.yaml",
                "docker-compose.production.yaml",
                "docker-compose.alpha.yaml",
                "docker-compose.beta.yaml",
                "docker-compose.stage.yaml",
                "docker-compose.staging.yaml",
                "docker-compose.dev.yaml",
                "docker-compose.development.yaml",
                "docker-compose.local.yaml",
                "docker-compose.test.yaml",
                "docker-compose.testing.yaml",
                "docker-compose.ci.yaml",
                "docker-compose.web.yaml",
                "docker-compose.worker.yaml",

                "containerfile",
                "containerfile.prod",
                "containerfile.production",
                "containerfile.alpha",
                "containerfile.beta",
                "containerfile.stage",
                "containerfile.staging",
                "containerfile.dev",
                "containerfile.development",
                "containerfile.local",
                "containerfile.test",
                "containerfile.testing",
                "containerfile.ci",
                "containerfile.web",
                "containerfile.worker",

                "compose.yaml",
                "compose.override.yaml",
                "compose.prod.yaml",
                "compose.production.yaml",
                "compose.alpha.yaml",
                "compose.beta.yaml",
                "compose.stage.yaml",
                "compose.staging.yaml",
                "compose.dev.yaml",
                "compose.development.yaml",
                "compose.local.yaml",
                "compose.test.yaml",
                "compose.testing.yaml",
                "compose.ci.yaml",
                "compose.web.yaml",
                "compose.worker.yaml",

                "compose.yml",
                "compose.override.yml",
                "compose.prod.yml",
                "compose.production.yml",
                "compose.alpha.yml",
                "compose.beta.yml",
                "compose.stage.yml",
                "compose.staging.yml",
                "compose.dev.yml",
                "compose.development.yml",
                "compose.local.yml",
                "compose.test.yml",
                "compose.testing.yml",
                "compose.ci.yml",
                "compose.web.yml",
                "compose.worker.yml",
            )
        ),
        FileIcon(
            name = "video",
            fileExtensions = listOf(
                "webm",
                "mkv",
                "flv",
                "vob",
                "ogv",
                "ogg",
                "gifv",
                "avi",
                "mov",
                "qt",
                "wmv",
                "yuv",
                "rm",
                "rmvb",
                "mp4",
                "m4v",
                "mpg",
                "mp2",
                "mpeg",
                "mpe",
                "mpv",
                "m2v",
            )
        ),
        FileIcon(
            name = "audio",
            fileExtensions = listOf(
                "8svx",
                "aa",
                "aac",
                "aax",
                "ac3",
                "aif",
                "aiff",
                "alac",
                "amr",
                "ape",
                "caf",
                "cda",
                "cdr",
                "dss",
                "ec3",
                "efs",
                "enc",
                "flac",
                "flp",
                "gp",
                "gsm",
                "it",
                "m3u",
                "m3u8",
                "m4a",
                "m4b",
                "m4p",
                "m4r",
                "mid",
                "mka",
                "mmf",
                "mod",
                "mp3",
                "mpc",
                "mscz",
                "mtm",
                "mui",
                "musx",
                "mxl",
                "nsa",
                "opus",
                "pkf",
                "qcp",
                "ra",
                "rf64",
                "rip",
                "sdt",
                "sesx",
                "sf2",
                "stap",
                "tg",
                "voc",
                "vqf",
                "wav",
                "weba",
                "wfp",
                "wma",
                "wpl",
                "wproj",
                "wv",
            )
        ),
        FileIcon("rust", fileExtensions = listOf("rs", "ron")),
        FileIcon("xaml", fileExtensions = listOf("xaml")),
        FileIcon("haskell", fileExtensions = listOf("hs", "lhs")),
        FileIcon("kotlin", fileExtensions = listOf("kt", "kts")),
        FileIcon(
            name = "git",
            fileExtensions = listOf("patch"),
            fileNames = listOf(
                ".git",
                ".gitignore",
                ".gitmessage",
                ".gitignore-global",
                ".gitignore_global",
                ".gitattributes",
                ".gitattributes-global",
                ".gitattributes_global",
                ".gitconfig",
                ".gitmodules",
                ".gitkeep",
                ".keep",
                ".gitpreserve",
                ".gitinclude",
                ".git-blame-ignore",
                ".git-blame-ignore-revs",
                ".git-for-windows-updater",
                "git-history",
            )
        ),
        FileIcon("lua", fileExtensions = listOf("lua"), fileNames = listOf(".luacheckrc")),
        FileIcon("clojure", fileExtensions = listOf("clj", "cljs", "cljc")),
        FileIcon("groovy", fileExtensions = listOf("groovy")),
        FileIcon("r", fileExtensions = listOf("r", "rmd"), fileNames = listOf(".Rhistory")),
        FileIcon("dart", fileExtensions = listOf("dart"), fileNames = listOf(".pubignore")),
        FileIcon("dart_generated", fileExtensions = listOf("freezed.dart", "g.dart")),
        FileIcon(
            name = "cmake",
            fileExtensions = listOf("cmake"),
            fileNames = listOf("cmakelists.txt", "cmakecache.txt")
        ),
        FileIcon(
            name = "assembly",
            fileExtensions = listOf(
                "asm",
                "a51",
                "inc",
                "nasm",
                "s",
                "ms",
                "agc",
                "ags",
                "aea",
                "argus",
                "mitigus",
                "binsource",
            )
        ),
        FileIcon("vue", fileExtensions = listOf("vue")),
        FileIcon("semgrep", fileNames = listOf("semgrep.yml", ".semgrepignore")),
        FileIcon(
            name = "vue-config",
            fileNames = listOf(
                "vue.config.js",
                "vue.config.ts",
                "vetur.config.js",
                "vetur.config.ts",
                "volar.config.js",
            )
        ),
        FileIcon(
            name = "nuxt",
            fileNames = listOf("nuxt.config.js", "nuxt.config.ts", ".nuxtignore", ".nuxtrc")
        ),
        FileIcon(
            name = "javascript-map",
            fileExtensions = listOf("js.map", "mjs.map", "cjs.map")
        ),
        FileIcon("css-map", fileExtensions = listOf("css.map")),
    )

    private val folderIcons = listOf<FolderIcon>()

    fun getSvgIconForFile(filePath: String, isLight: Boolean = false): String {
        val file = filePath.toFile()
        val fileName = file.name.lowercase()
        val extension = fileName.substringAfter(".", "").lowercase()

        val icon = fileIcons.find { fileName in it.fileNames } ?: fileIcons.find {
            extension in it.fileExtensions
        } ?: defaultFileIcon

        return if (icon.light && isLight) {
            "files/icons/${icon.name}_light.svg"
        } else {
            "files/icons/${icon.name}.svg"
        }
    }

    fun getSvgIconForFolder(
        folderPath: String,
        isExpanded: Boolean,
        isLight: Boolean = false
    ): String {
        val folder = folderPath.toFile()
        val folderName = folder.name.lowercase()

        val icon = folderIcons.find {
            folderName in it.folderNames
        } ?: defaultFolderIcon

        return if (icon.light && isLight) {
            "files/icons/${icon.name}${if (isExpanded) "-open" else ""}_light.svg"
        } else {
            "files/icons/${icon.name}${if (isExpanded) "-open" else ""}.svg"
        }
    }
}
